{"version":3,"sources":["App.tsx","components/card/card.tsx","components/gameover/gameover.tsx","reportWebVitals.ts","index.tsx"],"names":["intervalId","Card","props","showCard","className","id","indexKey","src","cardData","imgUrl","alt","onClick","handleCallBack","GameOver","status","style","fontSize","score","resetGame","App","initialState","shufCardsList","reduce","prev","cur","index","cardInfo","concat","sort","Math","random","clickCount","openCards","prevCard","prevCardId","timerStart","timeRemaining","isGameOver","useState","setInitialState","cardClick","e","preventDefault","startTimer","prevState","newOpenCards","slice","curId","parseInt","currentTarget","push","length","showSucessMessage","resetUnMatchedCards","setTimeout","splice","indexOf","clearInterval","counter","setInterval","map","card","toString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c9bdfb2.chunk.js","sourcesContent":["import React from 'react';\nimport Card from './components/card/card';\nimport './App.css';\nimport { useState } from 'react';\nimport GameOver from './components/gameover/gameover';\n\n\ninterface CardInfo  {\n  id:number,\n  imgUrl : string,\n}\n\ninterface InitialState  {\n  shufCardsList:CardInfo[],\n  clickCount:number,\n  openCards: number[],\n  prevCard: CardInfo,\n  prevCardId: number,\n  timerStart: boolean,\n  timeRemaining: number,\n  isGameOver: boolean,\n}\n\nlet intervalId:any;\n\nexport const App = ()=> {\n\n  //cardsList to display cads..\n  const cardsList = [0,1,2,3,4,5,6,7].reduce((prev:CardInfo[], cur, index) =>{\n    let cardInfo: CardInfo = {\n      id:index,\n      imgUrl : 'https://avatars.dicebear.com/api/avataaars/seed-'+ index+'.svg',\n    }\n    return prev.concat([cardInfo, cardInfo]);\n  }, []);\n\n  const initialState:InitialState = {\n    shufCardsList : cardsList.sort(() => Math.random() - 0.5),\n    clickCount: 0,\n    openCards : [],\n    prevCard: {imgUrl : '', id: -1},\n    prevCardId: -1,\n    timerStart: false,\n    timeRemaining: 30,\n    isGameOver: false\n  }\n\n\n  const [{ shufCardsList, clickCount, openCards, prevCard,prevCardId, timerStart, timeRemaining, isGameOver },setInitialState] = useState(initialState);\n\n  const cardClick= (e:React.MouseEvent<HTMLDivElement>):void => {\n\n    e.preventDefault();\n    if(!timerStart){\n      startTimer(initialState.timeRemaining);\n      setInitialState(prevState =>({...prevState, timerStart:!timerStart}));\n    }\n\n    if(clickCount < 1){\n      let newOpenCards:number[] = openCards.slice();\n      let curId = parseInt(e.currentTarget.id);\n      newOpenCards.push(curId);\n      setInitialState(prevState => ({...prevState,clickCount:clickCount +1 , openCards:newOpenCards, prevCardId: curId, prevCard: shufCardsList[curId]}));\n    }\n\n\n    else {\n\n      if(prevCard === shufCardsList[parseInt(e.currentTarget.id)]){\n        let newOpenCards:number[] = openCards.slice();\n        let curId = parseInt(e.currentTarget.id);\n        newOpenCards.push(curId);\n        setInitialState(prevState => ({...prevState, openCards:newOpenCards, clickCount:clickCount - 1, prevCardId: initialState.prevCardId, prevCard: initialState.prevCard}))\n        if(openCards.length == 15){\n          showSucessMessage();\n        }\n      }\n\n      else {\n\n        let newOpenCards:number[] = openCards.slice();\n        let curId = parseInt(e.currentTarget.id);\n        newOpenCards.push(curId);\n        setInitialState(prevState => ({...prevState,clickCount:clickCount - 1 , openCards:newOpenCards}));\n\n        resetUnMatchedCards(curId);\n        \n      }\n    }\n  }\n\n  const resetUnMatchedCards = (curId:number):void =>{\n    setTimeout(()=> {\n      let newOpenCards:number[] = openCards.slice();\n      newOpenCards.splice(newOpenCards.indexOf(curId), 1);  \n      setInitialState(prevState => ({...prevState, openCards:newOpenCards, prevCardId: initialState.prevCardId, prevCard: initialState.prevCard}))\n    }, 100);\n  }\n\n  const showSucessMessage= ()=>{\n    setTimeout(()=>{\n      clearInterval(intervalId);\n      setInitialState(prevState => ({...prevState, isGameOver: true}));\n    }, 500)\n  }\n\n  const resetGame = ():void =>{\n    clearInterval(intervalId);\n    setInitialState(initialState);\n  }\n\n  const startTimer = (counter:number) =>{\n     intervalId = setInterval(() => {\n      counter = counter - 1;\n      setInitialState(prevState => ({...prevState, timeRemaining: counter}));\n      if(counter === 0) clearInterval(intervalId)\n    }, 1000)\n  }\n\n  return (\n    <div className=\"App\">\n      <p> Remaining Time {timeRemaining} seconds</p>\n      {\n        ((timeRemaining > 0) && !isGameOver) ? (\n\n          shufCardsList.map((card: CardInfo, index: number)=>{\n            return <div className=\"CardWrapper\" key ={index}> \n              <Card cardData={card} handleCallBack = {cardClick} showCard={openCards.indexOf(index)> -1} indexKey = {index.toString()}/>\n            </div>\n          })\n        ) :\n        \n        <GameOver status={isGameOver} score ={timeRemaining} resetGame = {resetGame}/> \n        \n      }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport './card.css';\n\ninterface CardProps{\n    cardData: {\n        id: number,\n        imgUrl : string,\n    },\n    handleCallBack: (e:React.MouseEvent<HTMLDivElement>) => void,\n    showCard: boolean,\n    indexKey: string | undefined\n}\n\nexport const Card:React.FC<CardProps> = (props:CardProps)=> {\n\n  return (\n    <>\n    {\n      !props.showCard ? (\n        <div className=\"card\" onClick= {props.handleCallBack} id={props.indexKey}>\n         <span></span>\n    </div>\n      ) :\n\n      (\n        <div className=\"card\" id={props.indexKey}>\n          <img src={props.cardData.imgUrl} alt=\"\"/> \n      </div>\n      )\n    }\n </>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport './gameover.css';\n\ninterface GameOverProps {\n    status : boolean,\n    score : number,\n    resetGame: (e:React.MouseEvent<HTMLButtonElement>) => void,\n}\n\nexport const GameOver:React.FC<GameOverProps> = (props: GameOverProps)=> {\n\n  return (\n        <>\n            {\n                !props.status ? <p className=\"gameOverTxt\">Sorry.. You have lost <span style={{fontSize:100}}>&#128542;</span></p> : <div className=\"gameOverTxt\">Congrats!! you have completed..<span style={{fontSize:100}}>&#128522;</span><p> Your score {props.score}</p></div>\n            }   \n            <button onClick={props.resetGame} className=\"resetButton\">Play Again</button>  \n        </>\n  );\n}\n\nexport default GameOver;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}